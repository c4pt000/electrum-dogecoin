#!/usr/bin/env python3
import os
import subprocess
import sys

try:
    import requests
except ImportError as e:
    sys.exit(f"Error: {str(e)}. Try 'sudo python3 -m pip install <module-name>'")

os.chdir(os.path.dirname(os.path.realpath(__file__)))
os.chdir('..')

cmd = "find electrum -type f -name '*.py' -o -name '*.kv'"

files = subprocess.check_output(cmd, shell=True)

with open("app.fil", "wb") as f:
    f.write(files)

print("Found {} files to translate".format(len(files.splitlines())))

# Generate fresh translation template
if not os.path.exists('electrum/locale'):
    os.mkdir('electrum/locale')
print('Generating template...')
cmd = 'xgettext -s --from-code UTF-8 --language Python --no-wrap -f app.fil --output=electrum/locale/messages.pot'
subprocess.check_output(cmd, shell=True)

os.chdir('electrum')

crowdin_api_key = None

filename = os.path.expanduser('~/.crowdin_api_key')
if os.path.exists(filename):
    with open(filename) as f:
        crowdin_api_key = f.read().strip()

if "crowdin_api_key" in os.environ:
    crowdin_api_key = os.environ["crowdin_api_key"]

if not crowdin_api_key:
    print('Missing crowdin_api_key. Cannot push.')
    sys.exit(0)
print('Found crowdin_api_key. Will push updated source-strings to crowdin.')

crowdin_project_id = 20482  # for "Electrum" project on crowdin
locale_file_name = "locale/messages.pot"
crowdin_file_name = "messages.pot"
crowdin_file_id = 68  # for "/electrum-client/messages.pot"
global_headers = {"Authorization": "Bearer {}".format(crowdin_api_key)}

# client.storages.add_storage(f)
print(f"Uploading to temp storage...")
url = f'https://api.crowdin.com/api/v2/storages'
with open(locale_file_name, 'rb') as f:
    headers = {**global_headers, **{"Crowdin-API-FileName": crowdin_file_name}}
    response = requests.request("POST", url, data=f, headers=headers)
    print("", "storages.add_storage:", "-" * 20, response.text, "-" * 20, sep="\n")
    storage_id = response.json()["data"]["id"]

# client.source_files.update_file(projectId=crowdin_project_id, storageId=storage_id, fileId=crowdin_file_id)
print(f"Copying from temp storage and updating file in perm storage...")
url = f'https://api.crowdin.com/api/v2/projects/{crowdin_project_id}/files/{crowdin_file_id}'
headers = {**global_headers, **{"content-type": "application/json"}}
response = requests.request("PUT", url, json={"storageId": storage_id}, headers=headers)
print("", "source_files.update_file:", "-" * 20, response.text, "-" * 20, sep="\n")

# client.translations.build_crowdin_project_translation(projectId=crowdin_project_id)
print(f"Rebuilding translations...")
url = f'https://api.crowdin.com/api/v2/projects/{crowdin_project_id}/translations/builds'
headers = {**global_headers, **{"content-type": "application/json"}}
response = requests.request("POST", url, headers=headers)
print("", "translations.build_crowdin_project_translation:", "-" * 20, response.text, "-" * 20, sep="\n")
